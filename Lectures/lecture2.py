# Список - некоторый массив, который может хранить любые типы данных

# list_1 = [] - созжание массива
# list_1 = list() - созжание массива
# list_1 = [1, 2, 3, 4, 5] - созжание массива
# print(list_1)
# print(len(list_1)) - выводит длину списка
# print(list_1[index_el]) - выводит значение под индексом элемента
#               [-1] - отрицательный индекс - числа с конца

# list_1.append(8) - добавляет элемент в конец списка

# for i in range(5): - программа которая добавляет в список с каждой этерацией i равную от 0 до 4 (последнее значение не берется)
#     list_1.append(i)
#     print(*list_1) - печает список без запятых и скобок

#  Работа со списками: 
# list_1 = [12, 2, 33, 2, 43, 41]
# print(list_1)
# # list_1.pop() - удаляет последний элемент
# # print(list_1)
# # print(list_1.pop()) - печатает переменную которую он удаляет (возвращает ее)
# # print(list_1)
# # print(list_1.pop(2)) - удаляет переменную с определенным индексом
# # print(list_1)
# print(list_1.insert(1, 2)) - добавляет на позицию 1 число 2
# print(list_1)

# Работа со срезами:
# print(list_1[0]) - печатает первый элемент
# print(list_1[len(list_1)-1]) - печатает последний элемент списка
# print(list_1[len(list_1)-5]) - печатает 5 элемент с конца 
# print(list_1[:]) - значение до двоетчия - начальный элемент, после двоеточия - конечный
# print(list_1[::ШАГ]) - добавляет значение шага с которым происходит перечесление

#  -------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Кортежи - tuple - неизменяемые списки, мало памати и намного быстрее списка, используем когда точно знаем что не будет его изменять, значение паролей

# v = (1, 2, 3, ) - без запятой будет тип инт

# v = [1, 2, 3] - без запятой будет тип инт
# print(v)
# print(type(v))

# v = tuple(v) - превратили список в кортеж
# print(v)
# print(type(v))

# a, b, c = v - разбили кортеж на переменные и присвоили им значения элементов кортежа
# print(a, b, c)

# t = (1, 2, 3, 4,)
# for i in range(len(t)): - перебор элементов
#     print(t[i])

#  -------------------------------------------------------------------------------------------------------------------------------------------------------------------

#  Словарь - неупорядоченные коллекции произвольных обьектов с доступом по ключу

# d = {}
# d = dict()

# d['q'] = 'qwerty' - задали ключ и его значение
# print(d)
# d['w'] = 'werty'
# print(d) - выведет все значения и их ключи
# print(d[q]) - выводит ключ q и его значение qwerty
# d[ключ] = его значение - добавляем значения в словарь
# del d[ключ] - удаляет элемент из словаря

# for item in d:
#   print(item) - выводит только ключи
#   print(d[item]) - выводит значение ключей

# d.iteams() - выводит ключ с его значением отдельными кортежами
# for (k, v) in d.items():
#   print(k, v) - выводит ключ и его значение

#  -------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Множество содержит только уникальные значения - неупорядоченны

# q = set() - создает множество
# colors = {'red', 'green', 'black'}
# print(colors)
# colors.add('gray') - добавляет значение в множество
# print(colors)
# colors.remove('red') - удаляет определенный элемент
# colors.discard('red') - сперва проверяет есть ли данный элемент в множестве и если есть, то удаляет
# color.clear() - удаляет все элементы из множества

# Операции с множествами:

# a = {1, 2, 3, 5, 8}
# b = {2, 5, 8, 13, 21}
# c = a.copy() - копирует множество
# u = a.union(b) - обьединяет два множества при этом не сохраняет повторяющиеся элементы
# i = a.interscription(b) - находит значения пересекающиеся в множествах 
# dl = a.difference(b) - разность, вычетаем из множества а множество б
# frozenset(a) - замораживает множество, делает его не редактируемым

#  -------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Генератор списков 

# list_1 = [exp for item in iterable] 
# list_1 = [0 for i in range(5)] - заполняет списко значением 0 в количесвте 5 раз
# list_1 = [0 for i in range(1, 101) if i % 2 == 0] - заполняет только четными
# list_1 = [(i, i) for i in range(1, 101) if i % 2 == 0] - создает пары чисел/кортежи
# list_1 = [i * 2 for i in range(1, 101) if i % 2 == 0] - заначение i можно умножать делить вычетать прибавлять
