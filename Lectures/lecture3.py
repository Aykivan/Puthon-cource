#  –§—É–Ω–∫—Ü–∏—è - def
# –ü—Ä–∏–º–µ—Ä - —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è —Å—É–º–º–∏—Ä—É–µ—Ç –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ n

# def sum_numbers(n, y = 'Hello'):
#     print(y) # –ü–µ—Ä–µ–¥–∞–ª–∏ y –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Hello, –µ—Å–ª–∏ –º—ã –µ–≥–æ —Å–∞–º–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç, —Ç–æ –æ–Ω–æ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ
#     summa = 0
#     for i in range(1, n + 1):
#         summa += i
# #     print(summa) –µ—Å–ª–∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–∏–Ω—Ç, —Ç–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å return
#     return summa
#     print(stop) 
#     # return –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏, –∞ –∑–Ω–∞—á–∏—Ç –≤—Å–µ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ –ø–æ—Å–ª–µ –Ω–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

# a = sum_numbers(4)
# print(a)

#  –§—É–Ω–∫—Ü–∏—è —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–≤–æ
# def sum_str(*args): # –° –ø–æ–º–æ—â—å—é * –º—ã –æ–±–æ–∑–Ω–∞—á–∞–µ–º –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
#     res = ''
#     for i in args:
#         res += i
#     return res

# a = sum_str('q', 'e', 'r', 'e', 'e')
# print(a)
# print(sum_str(1, 2, 3)) - –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ

# –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å - —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞

# import modul3 # –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
# print(modul3.max1(5, 9))

# from modul3 import max1 # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –Ω–∞–º —Ñ—É–Ω–∫—Ü–∏—é
# # –ú—ã –º–æ–∂–µ–º –≤–º–µ—Å—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–ø–∏—Å–∞—Ç—å * —Ç–æ–≥–¥–∞ –º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
# print(max1(5, 4)) # –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ, –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫

# import modul3 as m1 # –ß—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∫–∞–∂–¥—ã–π —Ä–∞–∑, –º—ã –º–æ–∂–µ–º –ø—Ä–∏—Å–≤–æ–∏—Ç—å –µ–º—É –∏–º—è –≤–Ω—É—Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
# print(m1.max1(5, 4))

# –†–µ–∫—É—Ä—Å–∏—è - —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç —Å–∞–º–∞ —Å–∏–±—è

# : –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –§–∏–±–æ–Ω–∞—á—á–∏, —ç—Ç–æ —Ç–∞–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –≤
# –∫–æ—Ç–æ—Ä–æ–π –∫–∞–∂–¥–æ–µ –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ —Ä–∞–≤–Ω–æ —Å—É–º–º—É 2-—É—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö
# üí° –ü—Ä–∏ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–∏ –≤–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, –∫–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–¥–æ
# –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –≤—ã–∑—ã–≤–∞—Ç—å —Å–∞–º—É —Å–µ–±—è. –ü–æ-–¥—Ä—É–≥–æ–º—É –≥–æ–≤–æ—Ä—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
# —É–∫–∞–∑–∞—Ç—å –±–∞–∑–∏—Å —Ä–µ–∫—É—Ä—Å–∏–∏

# def fib(n):
#     if n in [1, 2]:
#         return 1
#     return fib(n - 1) + fib(n - 2) 
# –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –≥–ª–∞–≤–Ω–æ–µ —É–∫–∞–∑–∞—Ç—å –±–∞–∑–∏—Å

# –ê–ª–≥–æ—Ä–∏—Ç–º—ã
# –ë—ã—Å—Ç—Ä–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ 
# –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–∞–∫–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –∫–∞–∫ ‚Äú—Ä–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π‚Äù.
# –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–∏–º–µ—Ä, –∑–∞—Ç–µ–º –Ω–∞–ø–∏—à–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥
# –î–≤–∞ –¥—Ä—É–≥–∞ —Ä–µ—à–∏–ª–∏ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É: –æ–¥–∏–Ω –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100, –¥—Ä—É–≥–æ–π
# –¥–æ–ª–∂–µ–Ω –æ—Ç–≥–∞–¥–∞—Ç—å. –°–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å, —á—Ç–æ –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–π–Ω–æ–º
# –ø–æ—Ä—è–¥–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 32, 27, 60, 73‚Ä¶ –î–∞, –º—ã –º–æ–∂–µ–º —É–≥–∞–¥–∞—Ç—å –≤ –∫–∞–∫–æ–π-—Ç–æ –º–æ–º–µ–Ω—Ç, –Ω–æ —á—Ç–æ
# –µ—Å–ª–∏ –º—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ‚Äú—Ä–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π‚Äù –û–±–æ–∑–Ω–∞—á–∏–º –¥—Ä—É–∑–µ–π, –¥—Ä—É–≥_1
# —ç—Ç–æ –ò–≤–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ, –¥—Ä—É–≥_2 —ç—Ç–æ –ü–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≥–∞–¥—ã–≤–∞–µ—Ç. –ò—Ç–∞–∫
# –Ω–∞—á–Ω–µ–º:

# def quick_sort(array):
#     if len(array) <= 1:
#         return array
#     else:
#         pivot = array[0]
#     less =[i for i in array[1:] if i <= pivot]
#     greater = [i for i in array[1:] if i > pivot]
#     return quick_sort(less) + [pivot] + quick_sort(greater)

# print(quick_sort([1, 4, 2, 3, 11, 36]))

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º

# def merge_sort(nums):
#     if len(nums) > 1:
#         mid = len(nums) // 2
#         left = nums[:mid]
#         right = nums[mid:]
#         merge_sort(left)
#         merge_sort(right)
#         i = j = k = 0
#         while i < len(left) and j < len(right):
#             if left[i] < right[j]:
#                     nums[k] = nums[left]
#                     i += 1
#             else:
#                 nums[k] = nums[right]
#                 j += 1 
#             k += 1 
#         while i < len[left]:
#             nums[k] = left[i]
#             i += 1
#             k += 1
#         while j < len[right]:
#             nums[k] = right[j]
#             i += 1
#             k += 1